<?php
/*
 * Copyright (c) 2018-2021. - Eighty / 20 Results by Wicked Strong Chicks.
 * ALL RIGHTS RESERVED
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace E20R\Test;

// Test specific class imports
use Codeception\Test\Unit;
use Spatie\Snapshots\MatchesSnapshots;
use \Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use Brain\Monkey;
use Brain\Monkey\Functions;
use Brain\Monkey\Actions;
use Brain\Monkey\Filters;

use E20R\Import_Members\Data;
use E20R\Import_Members\Import\Ajax;
use E20R\Import_Members\Import\CSV;
use E20R\Import_Members\Import\Page;
use E20R\Import_Members\Import_Members;
use E20R\Import_Members\Email_Templates;
use E20R\Import_Members\Modules\BuddyPress\Column_Validation as BuddyPress_Validation;
use E20R\Import_Members\Modules\PMPro\Column_Validation as PMPro_Validation;
use E20R\Import_Members\Modules\PMPro\Import_Member;
use E20R\Import_Members\Modules\Users\Column_Validation as User_Validation;
use E20R\Import_Members\Modules\Users\Import_User;


if ( ! defined( 'E20R_UNITTEST_ROW_COUNT' ) ) {
	define( 'E20R_UNITTEST_ROW_COUNT', 3 );
}
class ImportMembersTest extends Unit {

	/**
	 * Test case setup function
	 *
	 * @return void
	 */
	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		Monkey\setUp();
	}

	/**
	 * Test case tear-down function
	 * Will trigger errors due to missed function expectations
	 *
	 * @return void
	 */
	protected function tearDown(): void {
		Monkey\tearDown();
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	/**
	 * Unit test for the plugin_row_meta member class
	 *
	 * @param string[] $row_meta_list
	 * @param int $expected_results
	 *
	 * @dataProvider fixture_plugin_row_meta_data
	 * @test
	 */
	public function test_plugin_row_meta( $row_meta_list, $file_name, $expected_results ) {

		$class    = Import_Members::get_instance();
		$row_list = $class->plugin_row_meta( $row_meta_list, $file_name );

		$result = count( $row_list );
		self::assertEquals( $expected_results, $result );
	}

	/**
	 * Fixture for the plugin_row_meta_data unit test
	 *
	 * Expected info for fixture:
	 *      (array) $row_meta_list, (string) $file_name, (int) $expected_results
	 *
	 * @return array[]
	 */
	public function fixture_plugin_row_meta_data() {
		return array(
			array( array(), 'class.pmpro-import-members.php', 0 ),
			array(
				array(
					'settings' => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url( '/wp-admin/?page=pmpro-import-members' ),
						__( 'Settings Page', 'pmpro-import-members-from-csv' ),
						__( 'Settings Page', 'pmpro-import-members-from-csv' )
					),
				),
				'class.pmpro-import-members.php',
				1,
			),
			array( array(), 'class-loader.php', 0 ),
			array(
				array(
					'donate'        => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url_raw( 'https://www.paypal.me/eighty20results' ),
						__(
							'Donate to support updates, maintenance and tech support for this plugin',
							'pmpro-import-members-from-csv'
						),
						__( 'Donate', 'pmpro-import-members-from-csv' )
					),
					'documentation' => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url( 'https://wordpress.org/plugins/pmpro-import-members-from-csv/' ),
						__( 'View the documentation', 'pmpro-import-members-from-csv' ),
						__( 'Docs', 'pmpro-import-members-from-csv' )
					),
					'help'          => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url( 'https://wordpress.org/support/plugin/pmpro-import-members-from-csv' ),
						__( 'Visit the support forum', 'pmpro-import-members-from-csv' ),
						__( 'Support', 'pmpro-import-members-from-csv' )
					),
				),
				'class.pmpro-import-members.php',
				3,
			),
			array(
				array(
					'donate'        => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url_raw( 'https://www.paypal.me/eighty20results' ),
						__(
							'Donate to support updates, maintenance and tech support for this plugin',
							'pmpro-import-members-from-csv'
						),
						__( 'Donate', 'pmpro-import-members-from-csv' )
					),
					'documentation' => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url( 'https://wordpress.org/plugins/pmpro-import-members-from-csv/' ),
						__( 'View the documentation', 'pmpro-import-members-from-csv' ),
						__( 'Docs', 'pmpro-import-members-from-csv' )
					),
					'help'          => sprintf(
						'<a href="%1$s" title="%2$s">%3$s</a>',
						\esc_url( 'https://wordpress.org/support/plugin/pmpro-import-members-from-csv' ),
						__( 'Visit the support forum', 'pmpro-import-members-from-csv' ),
						__( 'Support', 'pmpro-import-members-from-csv' )
					),
				),
				'class-pmpro-import-members.php', // Note, not the correct plugin file string
				3,
			),
		);
	}

	/**
	 * Tests that expected hooks are being loaded
	 *
	 * @throws Monkey\Expectation\Exception\ExpectationArgsRequired
	 * @test
	 */
	public function test_load_hooks() {

		Actions\expectAdded( 'plugins_loaded' )
			->once()
			->with( array( Ajax::get_instance(), 'load_hooks' ), 99 );

		Actions\expectAdded( 'plugins_loaded' )
			->once()
			->with( array( Email_Templates::get_instance(), 'load_hooks' ), 99 );

		Actions\expectAdded( 'plugins_loaded' )
			->once()
			->with( array( Page::get_instance(), 'load_hooks' ), 99 );

		Actions\expectAdded( 'plugins_loaded' )
			->once()
			->with( array( User_Validation::get_instance(), 'load_actions' ), 30 );

		Actions\expectAdded( 'plugins_loaded' )
			->once()
			->with( array( PMPro_Validation::get_instance(), 'load_actions' ), 31 );

		Actions\expectAdded( 'plugins_loaded' )
			->once()
			->with( array( BuddyPress_Validation::get_instance(), 'load_actions' ), 32 );

		Actions\expectAdded( 'init' )
			->once()
			->with( array( Import_Members::get_instance(), 'load_i18n' ), 5 );

		Actions\expectAdded( 'init' )
			->once()
			->with( array( new Data(), 'process_csv' ) );

		Actions\expectAdded( 'admin_enqueue_scripts' )
			->once()
			->with( array( Import_Members::get_instance(), 'admin_enqueue_scripts' ) );

		Filters\expectAdded( 'e20r_import_usermeta' )
			->once()
			->with( array( new Import_User(), 'import_usermeta' ), 10, 2 );

		Actions\expectAdded( 'e20r_after_user_import' )
			->once()
			->with( array( Import_Member::get_instance(), 'import_membership_info' ), -1, 2 );

		Actions\expectAdded( 'e20r_after_user_import' )
			->once()
			->with( array( new Data(), 'cleanup' ), 9999, 2 );

		Filters\expectAdded( 'plugin_row_meta' )
			->once()
			->with( array( Import_Members::get_instance(), 'plugin_row_meta' ), 10, 2 );

		Actions\expectAdded( 'wp_loaded' )
			->once()
			->with( array( Import_Members::get_instance(), 'remove_IUCSV_support' ), 10 );

		// TODO: Mock the remove_action call for is_iu_post_user_import"
		// with `"pmprosm_is_iu_post_user_import", 20` as the function arguments

		Actions\expectDone( 'e20r_import_load_licensed_modules' )
			->atLeast()
			->once();

		Actions\expectDone( 'e20r_import_load_licensed_modules' )
			->atLeast()
			->once();

		$class = Import_Members::get_instance();
		$class->load_hooks();
	}


	public function test_admin_enqueue_scripts() {
		// TODO: Implement unit test for admin_enqueue_scripts
	}

	/**
	 * Unit test for the Import_Members::is_pmpro_active() member function
	 *
	 * @param bool $expected
	 * @param string[] $plugin_list
	 *
	 * @dataProvider fixture_is_pmpro_active_data
	 * @test
	 */
	public function test_is_pmpro_active( $expected, $plugin_list = null ) {

		if ( ! function_exists( 'get_site_option' ) ) {
			Functions\expect( 'get_site_option' )
				->andReturn( $plugin_list );
		} else {
			echo 'Unexpected outcome: The get_site_option() function is defined!?!';
		}

		$result = Import_Members::is_pmpro_active();
		self::assertEquals( $expected, $result );
	}

	/**
	 * The fixture for the test_is_pmpro_active function
	 *
	 * Fixture generates the result we expect and the plugin list to check against: $expected, $plugin_list
	 *
	 * @return array[]
	 */
	public function fixture_is_pmpro_active_data() {
		return array(
			array(
				true,
				array(
					'00-e20r-utilities/class-loader.php',
					'pmpro-daily-something/pmpro-daily-something.php',
					'paid-memberships-pro/paid-memberships-pro.php',
					'woocommerce/woocommerce.php',
				),
			),
			array(
				false,
				array(
					'00-e20r-utilities/class-loader.php',
					'pmpro-daily-something/pmpro-daily-something.php',
					'woocommerce/woocommerce.php',
				),
			),
			array(
				false,
				array(
					'00-e20r-utilities/class-loader.php',
					'pmpro-daily-something/pmpro-daily-something.php',
					'woocommerce/woocommerce.php',
					'paid-memberships-pro/paid-memberships-pro.php.',
				),
			),
			array(
				true,
				null,
			),
		);
	}


	/**
	 * Deactivation unit test (ensure the correct delete_option invocations are run)
	 *
	 * @test
	 */
	public function test_deactivation() {

		if ( ! function_exists( 'delete_option' ) ) {
			Functions\expect( 'delete_option' )
				->with( 'e20r_import_has_donated' );

			Functions\expect( 'delete_option' )
				->once()
				->with( 'e20r_link_for_sponsor' );
		} else {
			echo 'Unexpected outcome: The delete_option() function is defined!?!';
		}

		Import_Members::deactivation();
	}

	/**
	 * Test that get_instance() returns the Import_Members class instance
	 */
	public function test_get_instance() {

		self::assertInstanceOf(
			'\\E20R\\Import_Members\\Import_Members',
			Import_Members::get_instance()
		);
	}

}
